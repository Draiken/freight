#!/usr/bin/env python

from __future__ import absolute_import, unicode_literals

import logging
import os
import sys

from datetime import datetime
from flask import current_app

from ds import providers, vcs
from ds.config import create_app, db
from ds.models import App, LogChunk, Repository, Task, TaskStatus
from ds.utils.workspace import Workspace


def main(task_id):
    task = Task.query.filter(
        Task.id == task_id
    ).first()
    if not task:
        raise ValueError('Task(id=%s) not found' % task_id)

    app = App.query.filter(App.id == task.app_id).first()
    repo = Repository.query.filter(Repository.id == app.repository_id).first()

    task.date_started = datetime.utcnow()
    db.session.add(task)
    db.session.commit()

    provider = providers.get(task.provider)

    workspace = Workspace(
        path=os.path.join(
            current_app.config['WORKSPACE_ROOT'], 'ds-repo-{}'.format(repo.id)
        ),
    )

    vcs_backend = vcs.get(
        repo.vcs,
        url=repo.url,
        workspace=workspace,
    )
    if vcs_backend.exists():
        vcs_backend.update()
    else:
        vcs_backend.clone()

    if not task.sha:
        task.sha = vcs_backend.describe(task.ref)
        db.session.add(task)
        db.session.commit()

    vcs_backend.checkout(task.sha)

    try:
        provider.execute(workspace, task)
    except Exception as exc:
        current_app.logger.exception(unicode(exc))
        task.status = TaskStatus.failed
    else:
        task.status = TaskStatus.finished
    task.date_finished = datetime.utcnow()
    db.session.add(task)
    db.session.commit()


if __name__ == '__main__':
    # add workspace explicit handler
    logger = logging.getLogger('workspace')
    logger.addHandler(logging.StreamHandler())
    logger.setLevel(logging.INFO)

    app = create_app()
    with app.app_context():
        main(sys.argv[1])
